stages:
- build
- test
- package
- deploy
- deploy-to-aur

code-style-check:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  script:
  - set +e
  - for file in $(git diff $(git describe --tags --abbrev=0) HEAD --name-only --diff-filter=ACMR); do
      [[ "${file}" != 3rdparty* ]] && [[ "${file}" != apps* ]] || continue;
      [[ "${file}" =~ \.(c|cpp|cxx|m|h|hpp|hxx)$ ]] || continue;
      grep -vr $'\r' "${file}" >/dev/null || { echo "${file} must not contain carriage return as line endings."; exit 1; };
      file --mime "${file}" | grep "charset=us-ascii" >/dev/null || { echo "${file} must be encoded as ASCII text."; exit 1; };
      clang-format -verbose -style=file "${file}" > "${file}.formatted";
      if ! diff -q "${file}" "${file}.formatted"; then
        diff "${file}" "${file}.formatted";
        >&2 echo "The code style of file \"${file}\" does not follow the code style guideline of this project.";
        exit 1;
      fi;
      rm -f "${file}.formatted";
    done
  - for file in $(git diff $(git describe --tags --abbrev=0) HEAD --name-only --diff-filter=ACMR); do
      [[ "${file}" != 3rdparty* ]] && [[ "${file}" != apps* ]] || continue;
      [[ "${file}" =~ (^|/)CMakeLists.txt$ || "${file}" =~ \.cmake$ ]] || continue;
      grep -vr $'\r' "${file}" >/dev/null || { echo "${file} must not contain carriage return as line endings."; exit 1; };
      file --mime "${file}" | grep "charset=us-ascii" >/dev/null || { echo "${file} must be encoded as ASCII text."; exit 1; };
      echo "Formatting ${file}";
      cmake-format "${file}" > "${file}.formatted";
      if ! diff -q "${file}" "${file}.formatted"; then
        diff "${file}" "${file}.formatted";
        >&2 echo "The code style of file \"${file}\" does not follow the code style guideline of this project.";
        exit 1;
      fi;
      rm -f "${file}.formatted";
    done
  - exit 0

ubuntu-self-contained:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  script:
  - wget https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Linux-x86_64.tar.gz
  - tar xf cmake-3.6.3-Linux-x86_64.tar.gz
  - export CMAKE_CMD=`pwd`/cmake-3.6.3-Linux-x86_64/bin/cmake
  - make self GRDIR=/usr/local/gr
  - mkdir artifacts
  - cp lib/gks/demo artifacts/gksdemo
  - cp lib/gks/qt/gksqt artifacts/gksqt
  - cp lib/gr/demo artifacts/grdemo
  - cp lib/gks/libGKS.so lib/gks/libGKS.a lib/gks/plugin/*.so lib/gr/libGR.so lib/gr/libGR.a lib/gr3/libGR3.so
       lib/gr3/libGR3platform.so lib/grm/libGRM.a lib/grm/libGRM.so lib/gr/qtgr/*.so artifacts/
  - cp -r lib/gks/fonts artifacts/
  - mkdir artifacts/include/
  - cp lib/gks/gks.h lib/gr/gr.h lib/gr3/gr3.h lib/grm/grm.h lib/gr/qtgr/grwidget.h artifacts/include/
  - mkdir artifacts/include/grm/
  - cp lib/grm/args.h lib/grm/dump.h lib/grm/event.h lib/grm/interaction.h lib/grm/net.h lib/grm/plot.h lib/grm/util.h
       artifacts/include/grm/
  - mv artifacts artifacts-ubuntu1604
  artifacts:
    expire_in: 1 week
    paths:
    - artifacts-ubuntu1604/

ubuntu-cmake-self-contained:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/ubuntu-self-contained
  script:
    - wget https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Linux-x86_64.tar.gz
    - tar xf cmake-3.6.3-Linux-x86_64.tar.gz
    - export CMAKE_CMD=`pwd`/cmake-3.6.3-Linux-x86_64/bin/cmake
    - make -C 3rdparty default extras
    - mkdir build
    - cd build
    - $CMAKE_CMD .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/install -DGR_USE_BUNDLED_LIBRARIES=ON
    - make
    - make install
    - cd ..
    - mv install artifacts-ubuntu1604-cmake
  artifacts:
    expire_in: 1 week
    paths:
      - artifacts-ubuntu1604-cmake/

ubuntu-cmake-self-contained-test:
  stage: test
  image: iffregistry.fz-juelich.de/scientific-it-systems/gr-test/c-testing
  rules:
  - if: '$CI_MERGE_REQUEST_ID'
    when: never
  - if: '$CI_COMMIT_MESSAGE =~ /RebuildReferenceImages\([][ ?*_a-zA-Z0-9-]*\)/'
    when: never
  - if: '$GR_REBUILD_REFERENCE'
    when: never
  - when: on_success
  needs:
  - ubuntu-cmake-self-contained
  script:
  - export GRDIR=`pwd`/artifacts-ubuntu1604-cmake/
  - gr_test c `pwd`/test_result/
  artifacts:
    paths:
    - test_result/
    when: on_failure

ubuntu-cmake-self-contained-rebuild-images:
  stage: test
  image: iffregistry.fz-juelich.de/scientific-it-systems/gr-test/c-testing:latest
  rules:
  - if: '$CI_MERGE_REQUEST_ID'
    when: never
  - if: '$CI_COMMIT_MESSAGE =~ /RebuildReferenceImages\([][ ?*_a-zA-Z0-9-]*\)/'
    when: on_success
  - if: '$GR_REBUILD_REFERENCE'
    when: on_success
  needs:
  - ubuntu-cmake-self-contained
  script:
  - export GRDIR=`pwd`/artifacts-ubuntu1604-cmake/

  - mkdir -p ~/.ssh
  - cat $SSH_KEY | base64 -d > ~/.ssh/id_rsa
  - mv $SSH_KNOWN_HOSTS ~/.ssh/known_hosts
  - chmod 600 ~/.ssh/id_rsa
  - git clone gitlab@iffgit.fz-juelich.de:Scientific-IT-Systems/gr-test.git
  - pip install -e gr-test/
  - cd gr-test
  - git checkout -b update-files/job-$CI_JOB_ID

  - if [[ -z "$GR_REBUILD_REFERENCE" ]]; then
      export GR_REBUILD_REFERENCE=`echo $CI_COMMIT_MESSAGE | sed 's/.*RebuildReferenceImages(\([][ ?*_a-zA-Z0-9-]*\)).*/\1/'` ;
    fi

  - if [[ $GR_REBUILD_REFERENCE == "all" ]] || [[ -z "$GR_REBUILD_REFERENCE" ]]; then
      gr_test --create=REFERENCE c ;
    else
    gr_test --create=REFERENCE --filter ${GR_REBUILD_REFERENCE} -- c ;
    fi
  - git config user.name "GR-Test Reference Bot"
  - git config user.email "$GITLAB_USER_EMAIL"
  - git status
  - git add -A gr_test/c_data/
  - git commit -m "Rebuilt c images in build job $CI_JOB_ID"
  - 'git push -o merge_request.description="Job initiator: @$GITLAB_USER_LOGIN" -o merge_request.label="auto-create" -o merge_request.label="reference-files-update" -o merge_request.remove_source_branch -o merge_request.create origin update-files/job-$CI_JOB_ID'


ubuntu-system-dependencies:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  script:
  - make install GRDIR=/usr/local/gr

ubuntu-cmake-system-dependencies:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/ubuntu-system-dependencies
  script:
    - apt-get update
    - apt-get install -y libqhull-dev libbz2-dev libavdevice-dev libtheora-dev libogg-dev libvpx-dev libfreetype6-dev
    - wget https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Linux-x86_64.tar.gz
    - tar xf cmake-3.6.3-Linux-x86_64.tar.gz
    - export CMAKE_CMD=`pwd`/cmake-3.6.3-Linux-x86_64/bin/cmake
    - mkdir build
    - cd build
    - $CMAKE_CMD .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/install -DGR_USE_BUNDLED_LIBRARIES=OFF
    - make

debian-self-contained:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  script:
  - wget https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Linux-x86_64.tar.gz
  - tar xf cmake-3.6.3-Linux-x86_64.tar.gz
  - export CMAKE_CMD=`pwd`/cmake-3.6.3-Linux-x86_64/bin/cmake
  - make self GRDIR=/usr/local/gr
  - mkdir artifacts
  - cp lib/gks/demo artifacts/gksdemo
  - cp lib/gks/qt/gksqt artifacts/gksqt
  - cp lib/gr/demo artifacts/grdemo
  - cp lib/gks/libGKS.so lib/gks/libGKS.a lib/gks/plugin/*.so lib/gr/libGR.so lib/gr/libGR.a lib/gr3/libGR3.so
       lib/gr3/libGR3platform.so lib/grm/libGRM.a lib/grm/libGRM.so lib/gr/qtgr/*.so artifacts/
  - cp -r lib/gks/fonts artifacts/
  - mkdir artifacts/include/
  - cp lib/gks/gks.h lib/gr/gr.h lib/gr3/gr3.h lib/grm/grm.h lib/gr/qtgr/grwidget.h artifacts/include/
  - mkdir artifacts/include/grm/
  - cp lib/grm/args.h lib/grm/dump.h lib/grm/event.h lib/grm/interaction.h lib/grm/net.h lib/grm/plot.h lib/grm/util.h
       artifacts/include/grm/
  - mv artifacts artifacts-debian9
  artifacts:
    expire_in: 1 week
    paths:
    - artifacts-debian9/

debian-cmake-self-contained:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/debian-self-contained
  script:
    - wget https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Linux-x86_64.tar.gz
    - tar xf cmake-3.6.3-Linux-x86_64.tar.gz
    - export CMAKE_CMD=`pwd`/cmake-3.6.3-Linux-x86_64/bin/cmake
    - make -C 3rdparty default extras
    - mkdir build
    - cd build
    - $CMAKE_CMD .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/install -DGR_USE_BUNDLED_LIBRARIES=ON
    - make
    - make install
    - cd ..
    - mv install artifacts-debian9-cmake
  artifacts:
    expire_in: 1 week
    paths:
      - artifacts-debian9-cmake/

debian-self-contained-armhf:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME-cross
  script:
    - make -C 3rdparty default extras \
      HOST=arm-linux-gnueabihf \
      ARCHITECTURE=arm \
      OS=arm-linux-gnueabihf \
      CC=arm-linux-gnueabihf-gcc \
      CXX=arm-linux-gnueabihf-g++ \
      AR=arm-linux-gnueabihf-ar \
      STRIP=arm-linux-gnueabihf-strip \
      PNG_EXTRA_CFLAGS="-DPNG_ARM_NEON_OPT=0" \
      GLFW_EXTRA_CMAKE_FLAGS=-DCMAKE_TOOLCHAIN_FILE=`pwd`/cmake/armhf-linux-gnu.cmake \
      OGG_EXTRA_CONFIGURE_FLAGS=--host=arm-linux-gnueabihf \
      THEORA_EXTRA_CONFIGURE_FLAGS="--host=arm-linux --disable-asm" \
      FFMPEG_EXTRA_CONFIGURE_FLAGS="--cross-prefix=arm-linux-gnueabihf- --arch=armhf --target-os=linux --pkg-config=pkg-config" \
      PIXMAN_EXTRA_CONFIGURE_FLAGS=--host=arm-linux-gnueabihf \
      CAIRO_EXTRA_CONFIGURE_FLAGS=--host=arm-linux-gnueabihfnu \
      TIFF_EXTRA_CONFIGURE_FLAGS=--host=arm-linux-gnueabihf \
      OPENH264_EXTRA_MAKE_FLAGS="OS=linux ARCH=armhf" \
      ZEROMQ_EXTRA_CONFIGURE_FLAGS=--host=arm-linux-gnueabihf
    - make self \
      CC=arm-linux-gnueabihf-gcc \
      LD=arm-linux-gnueabihf-ld \
      AR=arm-linux-gnueabihf-ar \
      CXX=arm-linux-gnueabihf-g++ \
      LINK=arm-linux-gnueabihf-g++ \
      QT_ARCH=armhf \
      QT4_QMAKE=/usr/lib/arm-linux-gnueabihf/qt4/bin/qmake \
      QT5_QMAKE=/usr/lib/arm-linux-gnueabihf/qt5/bin/qmake \
      GRDIR=/usr/local/gr
    - mkdir artifacts
    - cp lib/gks/demo artifacts/gksdemo
    - cp lib/gks/qt/gksqt artifacts/gksqt
    - cp lib/gr/demo artifacts/grdemo
    - cp lib/gks/libGKS.so lib/gks/libGKS.a lib/gks/plugin/*.so lib/gr/libGR.so lib/gr/libGR.a lib/gr3/libGR3.so
         lib/gr3/libGR3platform.so lib/grm/libGRM.a lib/grm/libGRM.so lib/gr/qtgr/*.so artifacts/
    - cp -r lib/gks/fonts artifacts/
    - mkdir artifacts/include/
    - cp lib/gks/gks.h lib/gr/gr.h lib/gr3/gr3.h lib/grm/grm.h lib/gr/qtgr/grwidget.h artifacts/include/
    - mkdir artifacts/include/grm/
    - cp lib/grm/args.h lib/grm/dump.h lib/grm/event.h lib/grm/interaction.h lib/grm/net.h lib/grm/plot.h lib/grm/util.h
         artifacts/include/grm/
    - mv artifacts artifacts-debian9-armhf
  artifacts:
    expire_in: 1 week
    paths:
      - artifacts-debian9-armhf/

debian-self-contained-aarch64:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/debian-self-contained-aarch64
  script:
    - make -C 3rdparty default extras \
      HOST=aarch64-linux-gnu \
      ARCHITECTURE=aarch64 \
      OS=aarch64-linux-gnu \
      CC=aarch64-linux-gnu-gcc \
      CXX=aarch64-linux-gnu-g++ \
      AR=aarch64-linux-gnu-ar \
      STRIP=aarch64-linux-gnu-strip \
      PNG_EXTRA_CFLAGS="-DPNG_ARM_NEON_OPT=0" \
      GLFW_EXTRA_CMAKE_FLAGS=-DCMAKE_TOOLCHAIN_FILE=`pwd`/cmake/aarch64-linux-gnu.cmake \
      OGG_EXTRA_CONFIGURE_FLAGS=--host=aarch64-linux-gnu \
      THEORA_EXTRA_CONFIGURE_FLAGS="--host=arm-linux --disable-asm" \
      FFMPEG_EXTRA_CONFIGURE_FLAGS="--cross-prefix=aarch64-linux-gnu- --arch=aarch64 --target-os=linux --pkg-config=pkg-config" \
      PIXMAN_EXTRA_CONFIGURE_FLAGS=--host=aarch64-linux-gnu \
      CAIRO_EXTRA_CONFIGURE_FLAGS=--host=aarch64-linux-gnu \
      TIFF_EXTRA_CONFIGURE_FLAGS=--host=aarch64-linux-gnu \
      OPENH264_EXTRA_MAKE_FLAGS="OS=linux ARCH=aarch64" \
      ZEROMQ_EXTRA_CONFIGURE_FLAGS=--host=aarch64-linux-gnu
    - make self \
      CC=aarch64-linux-gnu-gcc \
      LD=aarch64-linux-gnu-ld \
      AR=aarch64-linux-gnu-ar \
      CXX=aarch64-linux-gnu-g++ \
      LINK=aarch64-linux-gnu-g++ \
      QT_ARCH=aarch64 \
      QMAKE=/usr/lib/aarch64-linux-gnu/qt5/bin/qmake \
      GRDIR=/usr/local/gr
    - mkdir artifacts
    - cp lib/gks/demo artifacts/gksdemo
    - cp lib/gks/qt/gksqt artifacts/gksqt
    - cp lib/gr/demo artifacts/grdemo
    - cp lib/gks/libGKS.so lib/gks/libGKS.a lib/gks/plugin/*.so lib/gr/libGR.so lib/gr/libGR.a lib/gr3/libGR3.so
      lib/gr3/libGR3platform.so lib/grm/libGRM.a lib/grm/libGRM.so lib/gr/qtgr/*.so artifacts/
    - cp -r lib/gks/fonts artifacts/
    - mkdir artifacts/include/
    - cp lib/gks/gks.h lib/gr/gr.h lib/gr3/gr3.h lib/grm/grm.h lib/gr/qtgr/grwidget.h artifacts/include/
    - mkdir artifacts/include/grm/
    - cp lib/grm/args.h lib/grm/dump.h lib/grm/event.h lib/grm/interaction.h lib/grm/net.h lib/grm/plot.h lib/grm/util.h
      artifacts/include/grm/
    - mv artifacts artifacts-debian9-aarch64
  artifacts:
    expire_in: 1 week
    paths:
      - artifacts-debian9-aarch64/

debian-cmake-self-contained-aarch64:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/debian-self-contained-aarch64
  script:
    - make -C 3rdparty default extras \
      HOST=aarch64-linux-gnu \
      ARCHITECTURE=aarch64 \
      OS=aarch64-linux-gnu \
      CC=aarch64-linux-gnu-gcc \
      CXX=aarch64-linux-gnu-g++ \
      AR=aarch64-linux-gnu-ar \
      STRIP=aarch64-linux-gnu-strip \
      PNG_EXTRA_CFLAGS="-DPNG_ARM_NEON_OPT=0" \
      GLFW_EXTRA_CMAKE_FLAGS=-DCMAKE_TOOLCHAIN_FILE=`pwd`/cmake/aarch64-linux-gnu.cmake \
      OGG_EXTRA_CONFIGURE_FLAGS=--host=aarch64-linux-gnu \
      THEORA_EXTRA_CONFIGURE_FLAGS="--host=arm-linux --disable-asm" \
      FFMPEG_EXTRA_CONFIGURE_FLAGS="--cross-prefix=aarch64-linux-gnu- --arch=aarch64 --target-os=linux --pkg-config=pkg-config" \
      PIXMAN_EXTRA_CONFIGURE_FLAGS=--host=aarch64-linux-gnu \
      CAIRO_EXTRA_CONFIGURE_FLAGS=--host=aarch64-linux-gnu \
      TIFF_EXTRA_CONFIGURE_FLAGS=--host=aarch64-linux-gnu \
      OPENH264_EXTRA_MAKE_FLAGS="OS=linux ARCH=aarch64" \
      ZEROMQ_EXTRA_CONFIGURE_FLAGS=--host=aarch64-linux-gnu
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local/gr -DCMAKE_TOOLCHAIN_FILE=../cmake/aarch64-linux-gnu.cmake -DCMAKE_BUILD_TYPE=Release -DGR_USE_BUNDLED_LIBRARIES=ON
    - make
    - make install
    - mv /usr/local/gr ${CI_PROJECT_DIR}/artifacts-debian9-cmake-aarch64
  artifacts:
    expire_in: 1 week
    paths:
      - artifacts-debian9-cmake-aarch64/

debian-cmake-self-contained-armhf:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/debian-self-contained-armhf-cross
  script:
    - make -C 3rdparty default extras \
      HOST=arm-linux-gnueabihf \
      ARCHITECTURE=armhf \
      OS=arm-linux-gnueabihf \
      CC=arm-linux-gnueabihf-gcc \
      CXX=arm-linux-gnueabihf-g++ \
      AR=arm-linux-gnueabihf-ar \
      STRIP=arm-linux-gnueabihf-strip \
      PNG_EXTRA_CFLAGS="-DPNG_ARM_NEON_OPT=0" \
      GLFW_EXTRA_CMAKE_FLAGS=-DCMAKE_TOOLCHAIN_FILE=`pwd`/cmake/armhf-linux-gnu.cmake \
      OGG_EXTRA_CONFIGURE_FLAGS=--host=arm-linux-gnueabihf \
      THEORA_EXTRA_CONFIGURE_FLAGS="--host=arm-linux --disable-asm" \
      FFMPEG_EXTRA_CONFIGURE_FLAGS="--cross-prefix=arm-linux-gnueabihf- --arch=armhf --target-os=linux --pkg-config=pkg-config" \
      PIXMAN_EXTRA_CONFIGURE_FLAGS=--host=arm-linux-gnueabihf \
      CAIRO_EXTRA_CONFIGURE_FLAGS=--host=arm-linux-gnueabihf \
      TIFF_EXTRA_CONFIGURE_FLAGS=--host=arm-linux-gnueabihf \
      OPENH264_EXTRA_MAKE_FLAGS="OS=linux ARCH=armhf" \
      ZEROMQ_EXTRA_CONFIGURE_FLAGS=--host=arm-linux-gnueabihf
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local/gr -DCMAKE_TOOLCHAIN_FILE=../cmake/armhf-linux-gnu.cmake -DCMAKE_BUILD_TYPE=Release -DGR_USE_BUNDLED_LIBRARIES=ON
    - make
    - make install
    - mv /usr/local/gr ${CI_PROJECT_DIR}/artifacts-debian9-cmake-armhf
  artifacts:
    expire_in: 1 week
    paths:
      - artifacts-debian9-cmake-armhf/

debian-system-dependencies:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  script:
  - make install GRDIR=/usr/local/gr

debian-system-dependencies-armhf:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME-cross
  script:
    - make install \
      CC=arm-linux-gnueabihf-gcc \
      LD=arm-linux-gnueabihf-ld \
      AR=arm-linux-gnueabihf-ar \
      CXX=arm-linux-gnueabihf-g++ \
      LINK=arm-linux-gnueabihf-g++ \
      QT_ARCH=armhf \
      QT4_QMAKE=/usr/lib/arm-linux-gnueabihf/qt4/bin/qmake \
      QT5_QMAKE=/usr/lib/arm-linux-gnueabihf/qt5/bin/qmake \
      GRDIR=/usr/local/gr

debian-cmake-system-dependencies:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/debian-system-dependencies
  script:
    - apt-get update
    - apt-get install -y libqhull-dev libbz2-dev libfreetype6-dev
    - wget https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Linux-x86_64.tar.gz
    - tar xf cmake-3.6.3-Linux-x86_64.tar.gz
    - export CMAKE_CMD=`pwd`/cmake-3.6.3-Linux-x86_64/bin/cmake
    - mkdir build
    - cd build
    - $CMAKE_CMD .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/install -DGR_USE_BUNDLED_LIBRARIES=OFF
    - make

centos7-self-contained:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  script:
  - curl -LO https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Linux-x86_64.tar.gz
  - tar xf cmake-3.6.3-Linux-x86_64.tar.gz
  - export CMAKE_CMD=`pwd`/cmake-3.6.3-Linux-x86_64/bin/cmake
  - make self GRDIR=/usr/local/gr
  - mkdir artifacts
  - cp lib/gks/demo artifacts/gksdemo
  - cp lib/gks/qt/gksqt artifacts/gksqt
  - cp lib/gr/demo artifacts/grdemo
  - cp lib/gks/libGKS.so lib/gks/libGKS.a lib/gks/plugin/*.so lib/gr/libGR.so lib/gr/libGR.a lib/gr3/libGR3.so
       lib/gr3/libGR3platform.so lib/grm/libGRM.a lib/grm/libGRM.so lib/gr/qtgr/*.so artifacts/
  - cp -r lib/gks/fonts artifacts/
  - mkdir artifacts/include/
  - cp lib/gks/gks.h lib/gr/gr.h lib/gr3/gr3.h lib/grm/grm.h lib/gr/qtgr/grwidget.h artifacts/include/
  - mkdir artifacts/include/grm/
  - cp lib/grm/args.h lib/grm/dump.h lib/grm/event.h lib/grm/interaction.h lib/grm/net.h lib/grm/plot.h lib/grm/util.h
       artifacts/include/grm/
  - mv artifacts artifacts-centos7
  artifacts:
    expire_in: 1 week
    paths:
    - artifacts-centos7/

centos7-cmake-self-contained:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/centos7-self-contained
  script:
    - curl -LO https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Linux-x86_64.tar.gz
    - tar xf cmake-3.6.3-Linux-x86_64.tar.gz
    - export CMAKE_CMD=`pwd`/cmake-3.6.3-Linux-x86_64/bin/cmake
    - make -C 3rdparty default extras
    - mkdir build
    - cd build
    - $CMAKE_CMD .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/install -DGR_USE_BUNDLED_LIBRARIES=ON
    - make
    - make install
    - mv ../install/lib64/ ../install/lib/
    - cd ..
    - mv install artifacts-centos7-cmake
  artifacts:
    expire_in: 1 week
    paths:
      - artifacts-centos7-cmake/

centos7-system-dependencies:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  script:
  - make install GRDIR=/usr/local/gr

centos7-cmake-system-dependencies:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/centos7-system-dependencies
  script:
    - yum install -y libjpeg-turbo-devel libtiff-devel bzip2-devel
    - curl -LO https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Linux-x86_64.tar.gz
    - tar xf cmake-3.6.3-Linux-x86_64.tar.gz
    - export CMAKE_CMD=`pwd`/cmake-3.6.3-Linux-x86_64/bin/cmake
    - make -C 3rdparty default TARGETS="qhull"
    - mkdir build
    - cd build
    - $CMAKE_CMD .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/install -DGR_USE_BUNDLED_LIBRARIES=ON
    - make

centos7-32bit-self-contained:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  script:
  - curl -LO https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Linux-i386.tar.gz
  - tar xf cmake-3.6.3-Linux-i386.tar.gz
  - export CMAKE_CMD=`pwd`/cmake-3.6.3-Linux-i386/bin/cmake
  - THEORA_EXTRA_CONFIGURE_FLAGS=--disable-asm
    OPENH264_EXTRA_MAKE_FLAGS=ARCH=i386
    make self GRDIR=/usr/local/gr
  - mkdir artifacts
  - cp lib/gks/demo artifacts/gksdemo
  - cp lib/gks/qt/gksqt artifacts/gksqt
  - cp lib/gr/demo artifacts/grdemo
  - cp lib/gks/libGKS.so lib/gks/libGKS.a lib/gks/plugin/*.so lib/gr/libGR.so lib/gr/libGR.a lib/gr3/libGR3.so
       lib/gr3/libGR3platform.so lib/grm/libGRM.a lib/grm/libGRM.so lib/gr/qtgr/*.so artifacts/
  - cp -r lib/gks/fonts artifacts/
  - mkdir artifacts/include/
  - cp lib/gks/gks.h lib/gr/gr.h lib/gr3/gr3.h lib/grm/grm.h lib/gr/qtgr/grwidget.h artifacts/include/
  - mkdir artifacts/include/grm/
  - cp lib/grm/args.h lib/grm/dump.h lib/grm/event.h lib/grm/interaction.h lib/grm/net.h lib/grm/plot.h lib/grm/util.h
       artifacts/include/grm/
  - mv artifacts artifacts-centos7-32bit
  artifacts:
    expire_in: 1 week
    paths:
    - artifacts-centos7-32bit/

centos7-32bit-cmake-self-contained:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/centos7-32bit-self-contained
  script:
    - curl -LO https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Linux-i386.tar.gz
    - tar xf cmake-3.6.3-Linux-i386.tar.gz
    - export CMAKE_CMD=`pwd`/cmake-3.6.3-Linux-i386/bin/cmake
    - THEORA_EXTRA_CONFIGURE_FLAGS=--disable-asm
      OPENH264_EXTRA_MAKE_FLAGS=ARCH=i386
      make -C 3rdparty default extras
    - mkdir build
    - cd build
    - $CMAKE_CMD .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/install -DGR_USE_BUNDLED_LIBRARIES=ON
    - make
    - make install
    - cd ..
    - mv install artifacts-centos7-32bit-cmake
  artifacts:
    expire_in: 1 week
    paths:
      - artifacts-centos7-32bit-cmake/

centos7-32bit-system-dependencies:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  script:
  - make install GRDIR=/usr/local/gr

centos7-32bit-cmake-system-dependencies:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/centos7-32bit-system-dependencies
  script:
    - yum install -y libtiff-devel bzip2-devel
    - curl -LO https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Linux-i386.tar.gz
    - tar xf cmake-3.6.3-Linux-i386.tar.gz
    - export CMAKE_CMD=`pwd`/cmake-3.6.3-Linux-i386/bin/cmake
    - make -C 3rdparty default TARGETS="qhull"
    - mkdir build
    - cd build
    - $CMAKE_CMD .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/install -DGR_USE_BUNDLED_LIBRARIES=ON
    - make

arch-self-contained:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  script:
    - make self GRDIR=/usr/local/gr
    - mkdir artifacts
    - cp lib/gks/demo artifacts/gksdemo
    - cp lib/gks/qt/gksqt artifacts/gksqt
    - cp lib/gr/demo artifacts/grdemo
    - cp lib/gks/libGKS.so lib/gks/libGKS.a lib/gks/plugin/*.so lib/gr/libGR.so lib/gr/libGR.a lib/gr3/libGR3.so
         lib/gr3/libGR3platform.so lib/grm/libGRM.a lib/grm/libGRM.so lib/gr/qtgr/*.so artifacts/
    - cp -r lib/gks/fonts artifacts/
    - mkdir artifacts/include/
    - cp lib/gks/gks.h lib/gr/gr.h lib/gr3/gr3.h lib/grm/grm.h lib/gr/qtgr/grwidget.h artifacts/include/
    - mkdir artifacts/include/grm/
    - cp lib/grm/args.h lib/grm/dump.h lib/grm/event.h lib/grm/interaction.h lib/grm/net.h lib/grm/plot.h lib/grm/util.h
         artifacts/include/grm/
    - mv artifacts artifacts-arch
  artifacts:
    expire_in: 1 week
    paths:
      - artifacts-arch/

arch-cmake-self-contained:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/arch-self-contained
  script:
    - make -C 3rdparty default extras
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/install -DGR_USE_BUNDLED_LIBRARIES=ON -DCMAKE_INSTALL_LIBDIR=${CI_PROJECT_DIR}/install/lib
    - make
    - make install
    - cd ..
    - mv install artifacts-arch-cmake
  artifacts:
    expire_in: 1 week
    paths:
      - artifacts-arch-cmake/

arch-system-dependencies:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  script:
    - make install GRDIR=/usr/local/gr

arch-cmake-system-dependencies:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/arch-system-dependencies
  script:
    - pacman -Sy
    - pacman -S --noconfirm --needed qhull
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/install -DGR_USE_BUNDLED_LIBRARIES=OFF
    - make

windows-32bit-cross:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  script:
  - wget https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Linux-x86_64.tar.gz
  - tar xf cmake-3.6.3-Linux-x86_64.tar.gz
  - export CMAKE_CMD=`pwd`/cmake-3.6.3-Linux-x86_64/bin/cmake
  - make -C 3rdparty default extras
    EXTRAS="tiff ogg theora vpx ffmpeg pixman cairo"
    HOST=i686-w64-mingw32
    ARCHITECTURE=i686
    OS=w64_x86-cross-mingw32
    CC=i686-w64-mingw32-gcc
    CXX=i686-w64-mingw32-g++
    AR=i686-w64-mingw32-ar
    GLFW_EXTRA_CMAKE_FLAGS=-DCMAKE_TOOLCHAIN_FILE=`pwd`/cmake/i686-w64-mingw32.cmake
    OGG_EXTRA_CONFIGURE_FLAGS=--host=i686-w64-mingw32
    THEORA_EXTRA_CONFIGURE_FLAGS="--host=i686-w64-mingw32 --disable-asm"
    FFMPEG_EXTRA_CONFIGURE_FLAGS="--cross-prefix=i686-w64-mingw32- --arch=i686 --target-os=mingw32 --pkg-config=pkg-config"
    PIXMAN_EXTRA_CONFIGURE_FLAGS=--host=i686-w64-mingw32
    CAIRO_EXTRA_CONFIGURE_FLAGS=--host=i686-w64-mingw32
    TIFF_EXTRA_CONFIGURE_FLAGS=--host=i686-w64-mingw32
    OPENH264_EXTRA_MAKE_FLAGS="OS=mingw_nt ARCH=i386 CFLAGS=-fno-exceptions CXXFLAGS=-fno-exceptions LDFLAGS=-fno-exceptions"
  - MAKE="make -f makefile.mingw" make -f makefile.mingw
    GRDIR=./
    CC=i686-w64-mingw32-gcc
    CXX=i686-w64-mingw32-g++
    AR=i686-w64-mingw32-ar
  - MAKE="make -f makefile.mingw" make -f makefile.mingw -C lib/gks/qt
    GRDIR=./
    CC=i686-w64-mingw32-gcc
    CXX=i686-w64-mingw32-g++
    AR=i686-w64-mingw32-ar
    ARCHITECTURE=i686
  - mkdir artifacts
  - cp lib/gks/qt/gksqt.exe artifacts/
  - cp lib/gks/qt/*.dll artifacts/
  - cp -r lib/gks/qt/platforms artifacts/
  - cp lib/gks/libGKS.lib lib/gks/libGKS.dll lib/gks/libGKS.a lib/gks/plugin/*.dll lib/gks/plugin/*.a lib/gr/libGR.lib
       lib/gr/libGR.dll lib/gr/libGR.a lib/gr3/libGR3.dll lib/gr3/libGR3.a lib/grm/libGRM.dll lib/grm/libGRM.a
       artifacts/
  - cp -r lib/gks/fonts artifacts/
  - cp /usr/lib/gcc/i686-w64-mingw32/6.3-win32/libgcc_s_sjlj-1.dll artifacts/
  - mkdir artifacts/include/
  - cp lib/gks/gks.h lib/gr/gr.h lib/gr3/gr3.h lib/grm/grm.h lib/gr/qtgr/grwidget.h artifacts/include/
  - mkdir artifacts/include/grm/
  - cp lib/grm/args.h lib/grm/dump.h lib/grm/event.h lib/grm/interaction.h lib/grm/net.h lib/grm/plot.h lib/grm/util.h
       artifacts/include/grm/
  - mv artifacts artifacts-windows32
  artifacts:
    expire_in: 1 week
    paths:
    - artifacts-windows32/

windows-32bit-cmake-cross:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/windows-32bit-cross
  script:
    - mkdir qt5-runtime-Windows-i686
    - cd qt5-runtime-Windows-i686
    - wget https://gr-framework.org/downloads/3rdparty/qt5-runtime-Windows-i686.tar.gz
    - tar xf qt5-runtime-Windows-i686.tar.gz
    - cd ..
    - wget https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Linux-x86_64.tar.gz
    - tar xf cmake-3.6.3-Linux-x86_64.tar.gz
    - export CMAKE_CMD=`pwd`/cmake-3.6.3-Linux-x86_64/bin/cmake
    - make -C 3rdparty default extras
      EXTRAS="tiff ogg theora vpx ffmpeg pixman cairo"
      HOST=i686-w64-mingw32
      ARCHITECTURE=i686
      OS=w64_x86-cross-mingw32
      CC=i686-w64-mingw32-gcc
      CXX=i686-w64-mingw32-g++
      AR=i686-w64-mingw32-ar
      OPENJP2_EXTRA_CMAKE_FLAGS=-DCMAKE_TOOLCHAIN_FILE=`pwd`/cmake/i686-w64-mingw32.cmake
      GLFW_EXTRA_CMAKE_FLAGS=-DCMAKE_TOOLCHAIN_FILE=`pwd`/cmake/i686-w64-mingw32.cmake
      OGG_EXTRA_CONFIGURE_FLAGS=--host=i686-w64-mingw32
      THEORA_EXTRA_CONFIGURE_FLAGS="--host=i686-w64-mingw32 --disable-asm"
      FFMPEG_EXTRA_CONFIGURE_FLAGS="--cross-prefix=i686-w64-mingw32- --arch=i686 --target-os=mingw32 --pkg-config=pkg-config"
      PIXMAN_EXTRA_CONFIGURE_FLAGS=--host=i686-w64-mingw32
      CAIRO_EXTRA_CONFIGURE_FLAGS=--host=i686-w64-mingw32
      TIFF_EXTRA_CONFIGURE_FLAGS=--host=i686-w64-mingw32
      OPENH264_EXTRA_MAKE_FLAGS="OS=mingw_nt ARCH=i386 CFLAGS=-fno-exceptions CXXFLAGS=-fno-exceptions LDFLAGS=-fno-exceptions"
    - mkdir build
    - cd build
    - $CMAKE_CMD .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/install -DCMAKE_TOOLCHAIN_FILE=`pwd`/../cmake/i686-w64-mingw32.cmake -DCMAKE_MODULE_PATH=${CI_PROJECT_DIR}/qt5-runtime-Windows-i686/cmake -DGR_MANUAL_MOC_AND_RCC=ON -DGR_USE_BUNDLED_LIBRARIES=ON
    - make
    - make install
    - cd ..
    - mv qt5-runtime-Windows-i686/*.dll install/bin/
    - mv qt5-runtime-Windows-i686/platforms install/bin/platforms
    - cp /usr/lib/gcc/i686-w64-mingw32/6.3-win32/libgcc_s_sjlj-1.dll install/bin/
    - mv install artifacts-windows-32bit-cmake
  artifacts:
    expire_in: 1 week
    paths:
      - artifacts-windows-32bit-cmake/

windows-64bit-cross:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  script:
  - wget https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Linux-x86_64.tar.gz
  - tar xf cmake-3.6.3-Linux-x86_64.tar.gz
  - export CMAKE_CMD=`pwd`/cmake-3.6.3-Linux-x86_64/bin/cmake
  - make -C 3rdparty default extras
    EXTRAS="tiff ogg theora vpx openh264 ffmpeg pixman cairo"
    HOST=x86_64-w64-mingw32
    ARCHITECTURE=x86_64
    OS=w64_amd64-cross-mingw32
    CC=x86_64-w64-mingw32-gcc
    CXX=x86_64-w64-mingw32-g++
    AR=x86_64-w64-mingw32-ar
    GLFW_EXTRA_CMAKE_FLAGS=-DCMAKE_TOOLCHAIN_FILE=`pwd`/cmake/x86_64-w64-mingw32.cmake
    OGG_EXTRA_CONFIGURE_FLAGS=--host=x86_64-w64-mingw32
    THEORA_EXTRA_CONFIGURE_FLAGS=--host=x86_64-w64-mingw32
    FFMPEG_EXTRA_CONFIGURE_FLAGS="--cross-prefix=x86_64-w64-mingw32- --arch=x86_64 --target-os=mingw32 --pkg-config=pkg-config"
    PIXMAN_EXTRA_CONFIGURE_FLAGS=--host=x86_64-w64-mingw32
    CAIRO_EXTRA_CONFIGURE_FLAGS=--host=x86_64-w64-mingw32
    TIFF_EXTRA_CONFIGURE_FLAGS=--host=x86_64-w64-mingw32
    OPENH264_EXTRA_MAKE_FLAGS=OS=mingw_nt
  - MAKE="make -f makefile.mingw" make -f makefile.mingw
    GRDIR=./
    CC=x86_64-w64-mingw32-gcc
    CXX=x86_64-w64-mingw32-g++
    AR=x86_64-w64-mingw32-ar
  - MAKE="make -f makefile.mingw" make -f makefile.mingw -C lib/gks/qt
    GRDIR=./
    CC=x86_64-w64-mingw32-gcc
    CXX=x86_64-w64-mingw32-g++
    AR=x86_64-w64-mingw32-ar
    ARCHITECTURE=x86_64
  - mkdir artifacts
  - cp lib/gks/qt/gksqt.exe artifacts/
  - cp lib/gks/qt/*.dll artifacts/
  - cp -r lib/gks/qt/platforms artifacts/
  - cp lib/gks/libGKS.lib lib/gks/libGKS.dll lib/gks/libGKS.a lib/gks/plugin/*.dll lib/gks/plugin/*.a lib/gr/libGR.lib
       lib/gr/libGR.dll lib/gr/libGR.a lib/gr3/libGR3.dll lib/gr3/libGR3.a lib/grm/libGRM.dll lib/grm/libGRM.a
       artifacts/
  - cp -r lib/gks/fonts artifacts/
  - cp /usr/lib/gcc/x86_64-w64-mingw32/6.3-win32/libgcc_s_seh-1.dll artifacts/
  - mkdir artifacts/include/
  - cp lib/gks/gks.h lib/gr/gr.h lib/gr3/gr3.h lib/grm/grm.h lib/gr/qtgr/grwidget.h artifacts/include/
  - mkdir artifacts/include/grm/
  - cp lib/grm/args.h lib/grm/dump.h lib/grm/event.h lib/grm/interaction.h lib/grm/net.h lib/grm/plot.h lib/grm/util.h
       artifacts/include/grm/
  - mv artifacts artifacts-windows64
  artifacts:
    expire_in: 1 week
    paths:
    - artifacts-windows64/

windows-64bit-cmake-cross:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/windows-64bit-cross
  script:
    - mkdir qt5-runtime-Windows-x86_64
    - cd qt5-runtime-Windows-x86_64
    - wget https://gr-framework.org/downloads/3rdparty/qt5-runtime-Windows-x86_64.tar.gz
    - tar xf qt5-runtime-Windows-x86_64.tar.gz
    - cd ..
    - wget https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Linux-x86_64.tar.gz
    - tar xf cmake-3.6.3-Linux-x86_64.tar.gz
    - export CMAKE_CMD=`pwd`/cmake-3.6.3-Linux-x86_64/bin/cmake
    - make -C 3rdparty default extras
      EXTRAS="tiff ogg theora vpx openh264 ffmpeg pixman cairo"
      HOST=x86_64-w64-mingw32
      ARCHITECTURE=x86_64
      OS=w64_amd64-cross-mingw32
      CC=x86_64-w64-mingw32-gcc
      CXX=x86_64-w64-mingw32-g++
      AR=x86_64-w64-mingw32-ar
      OPENJP2_EXTRA_CMAKE_FLAGS=-DCMAKE_TOOLCHAIN_FILE=`pwd`/cmake/x86_64-w64-mingw32.cmake
      GLFW_EXTRA_CMAKE_FLAGS=-DCMAKE_TOOLCHAIN_FILE=`pwd`/cmake/x86_64-w64-mingw32.cmake
      OGG_EXTRA_CONFIGURE_FLAGS=--host=x86_64-w64-mingw32
      THEORA_EXTRA_CONFIGURE_FLAGS=--host=x86_64-w64-mingw32
      FFMPEG_EXTRA_CONFIGURE_FLAGS="--cross-prefix=x86_64-w64-mingw32- --arch=x86_64 --target-os=mingw32 --pkg-config=pkg-config"
      PIXMAN_EXTRA_CONFIGURE_FLAGS=--host=x86_64-w64-mingw32
      CAIRO_EXTRA_CONFIGURE_FLAGS=--host=x86_64-w64-mingw32
      TIFF_EXTRA_CONFIGURE_FLAGS=--host=x86_64-w64-mingw32
      OPENH264_EXTRA_MAKE_FLAGS=OS=mingw_nt
    - mkdir build
    - cd build
    - $CMAKE_CMD .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/install -DCMAKE_TOOLCHAIN_FILE=`pwd`/../cmake/x86_64-w64-mingw32.cmake -DCMAKE_MODULE_PATH=${CI_PROJECT_DIR}/qt5-runtime-Windows-x86_64/cmake -DGR_MANUAL_MOC_AND_RCC=ON  -DGR_USE_BUNDLED_LIBRARIES=ON
    - make
    - make install
    - cd ..
    - mv qt5-runtime-Windows-x86_64/*.dll install/bin/
    - mv qt5-runtime-Windows-x86_64/platforms install/bin/platforms
    - cp /usr/lib/gcc/x86_64-w64-mingw32/6.3-win32/libgcc_s_seh-1.dll install/bin/
    - mv install artifacts-windows-64bit-cmake
  artifacts:
    expire_in: 1 week
    paths:
      - artifacts-windows-64bit-cmake/

windows-64bit-cmake-msvc:
  stage: build
  image: windows:10-gr-build
  tags:
    - libvirt
  script:
    - vcvars_cmd cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/c/gr -DGR_USE_BUNDLED_LIBRARIES=OFF
    - vcvars_cmd cmake --build build --config Release
    - vcvars_cmd cmake --install build --config Release
    - cd /c/Qt/5.15.2/msvc2015_64/bin
    - cp -v Qt5Core.dll Qt5Gui.dll Qt5Widgets.dll Qt5Network.dll /c/gr/bin/
    - cd -
    - cd /c/gr/bin
    - mkdir -p platforms
    - cp -v /c/Qt/5.15.2/msvc2015_64/plugins/platforms/qwindows.dll platforms/
    - cd -
    - cd /c/local/bin
    - cp -v cairo.dll freetype.dll jpeg62.dll libpng16.dll pixman-1-0.dll qhull_r.dll tiff.dll tiffxx.dll turbojpeg.dll zlib.dll /c/gr/bin/
    - cd -
    - cp -v "/c/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools/VC/Redist/MSVC/14.28.29325/x64/Microsoft.VC142.CRT/vcruntime140.dll" /c/gr/bin/
    - cp -v "/c/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools/VC/Redist/MSVC/14.28.29325/x64/Microsoft.VC142.CRT/vcruntime140_1.dll" /c/gr/bin/
    - cp -v "/c/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools/VC/Redist/MSVC/14.28.29325/x64/Microsoft.VC142.CRT/msvcp140.dll" /c/gr/bin/
    - mv /c/gr artifacts-windows-64bit-cmake-msvc
  artifacts:
    expire_in: 1 week
    paths:
      - artifacts-windows-64bit-cmake-msvc/

darwin-self-contained-iff1600:
  stage: build
  only:
    - branches@Scientific-IT-Systems/gr
    - tags@Scientific-IT-Systems/gr
  script:
  - curl -LO https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Darwin-x86_64.tar.gz
  - tar xf cmake-3.6.3-Darwin-x86_64.tar.gz
  - export CMAKE_CMD=`pwd`/cmake-3.6.3-Darwin-x86_64/CMake.app/Contents/bin/cmake
  - export MACOSX_DEPLOYMENT_TARGET=10.11
  - rm -rf /usr/local/gr/*
  - make self GRDIR=/usr/local/gr QMAKE=/usr/local/qt5/bin/qmake QT5_QMAKE=/usr/local/qt5/bin/qmake
  - mkdir artifacts
  - cp lib/gks/demo artifacts/gksdemo
  - cp lib/gr/demo artifacts/grdemo
  - cp lib/gks/libGKS.dylib lib/gks/libGKS.a lib/gks/plugin/*.so lib/gr/libGR.dylib lib/gr/libGR.a lib/gr3/libGR3.dylib
       lib/grm/libGRM.a lib/grm/libGRM.dylib lib/gr/qtgr/*.dylib artifacts/
  - cp -r lib/gks/fonts artifacts/
  - mkdir artifacts/include/
  - cp lib/gks/gks.h lib/gr/gr.h lib/gr3/gr3.h lib/grm/grm.h lib/gr/qtgr/grwidget.h artifacts/include/
  - mkdir artifacts/include/grm/
  - cp lib/grm/args.h lib/grm/dump.h lib/grm/event.h lib/grm/interaction.h lib/grm/net.h lib/grm/plot.h lib/grm/util.h
       artifacts/include/grm/
  - mkdir artifacts/Applications/
  - cp -r lib/gks/quartz/build/Release/GKSTerm.app artifacts/Applications/GKSTerm.app
  - cp -r lib/gks/qt/gksqt.app artifacts/Applications/gksqt.app
  - mkdir -p artifacts/Applications/gksqt.app/Contents/Frameworks
  - mkdir -p artifacts/Applications/gksqt.app/Contents/plugins/platforms
  - cp /usr/local/qt5/plugins/platforms/libqcocoa.dylib artifacts/Applications/gksqt.app/Contents/plugins/platforms
  - cd artifacts/Applications
  - for BINARY in gksqt.app/Contents/plugins/platforms/libqcocoa.dylib gksqt.app/Contents/MacOS/gksqt; do
      for QT_FRAMEWORK in `otool -L $BINARY | tr '/' '\n' | grep -E 'Qt.*\.framework' | cut -d. -f1`; do
        rsync -a --exclude Headers --exclude *_debug* /usr/local/qt5/lib/$QT_FRAMEWORK.framework gksqt.app/Contents/Frameworks/;
        install_name_tool -change `otool -L $BINARY | grep $QT_FRAMEWORK | cut -d\( -f1` @executable_path/../Frameworks/$QT_FRAMEWORK.framework/Versions/Current/$QT_FRAMEWORK $BINARY;
      done;
    done
  - cd ../../
  - mv artifacts artifacts-darwin-iff1600
  tags:
  - macos
  artifacts:
    expire_in: 1 week
    paths:
    - artifacts-darwin-iff1600/

darwin-self-contained:
  stage: build
  image: macos:catalina-gr-build
  tags:
  - libvirt
  script:
  - export MACOSX_DEPLOYMENT_TARGET=10.11
  - sudo mkdir /usr/local/gr
  - sudo chown administrator:wheel /usr/local/gr
  - make self GRDIR=/usr/local/gr QMAKE=/usr/local/qt5/bin/qmake QT5_QMAKE=/usr/local/qt5/bin/qmake
  - mkdir artifacts
  - cp lib/gks/demo artifacts/gksdemo
  - cp lib/gr/demo artifacts/grdemo
  - cp lib/gks/libGKS.dylib lib/gks/libGKS.a lib/gks/plugin/*.so lib/gr/libGR.dylib lib/gr/libGR.a lib/gr3/libGR3.dylib
      lib/grm/libGRM.a lib/grm/libGRM.dylib lib/gr/qtgr/*.dylib artifacts/
  - cp -r lib/gks/fonts artifacts/
  - mkdir artifacts/include/
  - cp lib/gks/gks.h lib/gr/gr.h lib/gr3/gr3.h lib/grm/grm.h lib/gr/qtgr/grwidget.h artifacts/include/
  - mkdir artifacts/include/grm/
  - cp lib/grm/args.h lib/grm/dump.h lib/grm/event.h lib/grm/interaction.h lib/grm/net.h lib/grm/plot.h lib/grm/util.h
       artifacts/include/grm/
  - mkdir artifacts/Applications/
  - cp -r lib/gks/quartz/build/Release/GKSTerm.app artifacts/Applications/GKSTerm.app
  - cp -r lib/gks/qt/gksqt.app artifacts/Applications/gksqt.app
  - mkdir -p artifacts/Applications/gksqt.app/Contents/Frameworks
  - mkdir -p artifacts/Applications/gksqt.app/Contents/plugins/platforms
  - cp /usr/local/qt5/plugins/platforms/libqcocoa.dylib artifacts/Applications/gksqt.app/Contents/plugins/platforms
  - cd artifacts/Applications
  - for BINARY in gksqt.app/Contents/plugins/platforms/libqcocoa.dylib gksqt.app/Contents/MacOS/gksqt; do
      for QT_FRAMEWORK in `otool -L $BINARY | tr '/' '\n' | grep -E 'Qt.*\.framework' | cut -d. -f1`; do
        rsync -a --exclude Headers --exclude *_debug* /usr/local/qt5/lib/$QT_FRAMEWORK.framework gksqt.app/Contents/Frameworks/;
        install_name_tool -change `otool -L $BINARY | grep $QT_FRAMEWORK | cut -d\( -f1` @executable_path/../Frameworks/$QT_FRAMEWORK.framework/Versions/Current/$QT_FRAMEWORK $BINARY;
      done;
    done
  - cd ../../
  - mv artifacts artifacts-darwin
  artifacts:
    expire_in: 1 week
    paths:
    - artifacts-darwin/

darwin-self-contained-iff1605:
  stage: build
  only:
    - branches@Scientific-IT-Systems/gr
    - tags@Scientific-IT-Systems/gr
  script:
    - curl -LO https://gr-framework.org/downloads/3rdparty/cmake-3.6.3-Darwin-x86_64.tar.gz
    - tar xf cmake-3.6.3-Darwin-x86_64.tar.gz
    - export CMAKE_CMD=`pwd`/cmake-3.6.3-Darwin-x86_64/CMake.app/Contents/bin/cmake
    - export MACOSX_DEPLOYMENT_TARGET=11.0
    - rm -rf /usr/local/gr/*
    - make self GRDIR=/usr/local/gr QMAKE=/usr/local/qt5/bin/qmake QT5_QMAKE=/usr/local/qt5/bin/qmake
    - mkdir artifacts
    - cp lib/gks/demo artifacts/gksdemo
    - cp lib/gr/demo artifacts/grdemo
    - cp lib/gks/libGKS.dylib lib/gks/libGKS.a lib/gks/plugin/*.so lib/gr/libGR.dylib lib/gr/libGR.a lib/gr3/libGR3.dylib
      lib/grm/libGRM.a lib/grm/libGRM.dylib lib/gr/qtgr/*.dylib artifacts/
    - cp -r lib/gks/fonts artifacts/
    - mkdir artifacts/include/
    - cp lib/gks/gks.h lib/gr/gr.h lib/gr3/gr3.h lib/grm/grm.h lib/gr/qtgr/grwidget.h artifacts/include/
    - mkdir artifacts/include/grm/
    - cp lib/grm/args.h lib/grm/dump.h lib/grm/event.h lib/grm/interaction.h lib/grm/net.h lib/grm/plot.h lib/grm/util.h
      artifacts/include/grm/
    - mkdir artifacts/Applications/
    - cp -r lib/gks/quartz/build/Release/GKSTerm.app artifacts/Applications/GKSTerm.app
    - cp -r lib/gks/qt/gksqt.app artifacts/Applications/gksqt.app
    - mkdir -p artifacts/Applications/gksqt.app/Contents/Frameworks
    - mkdir -p artifacts/Applications/gksqt.app/Contents/plugins/platforms
    - cp /usr/local/qt5/plugins/platforms/libqcocoa.dylib artifacts/Applications/gksqt.app/Contents/plugins/platforms
    - cd artifacts/Applications
    - for BINARY in gksqt.app/Contents/plugins/platforms/libqcocoa.dylib gksqt.app/Contents/MacOS/gksqt; do
      for QT_FRAMEWORK in `otool -L $BINARY | tr '/' '\n' | grep -E 'Qt.*\.framework' | cut -d. -f1`; do
      rsync -a --exclude Headers --exclude *_debug* /usr/local/qt5/lib/$QT_FRAMEWORK.framework gksqt.app/Contents/Frameworks/;
      install_name_tool -change `otool -L $BINARY | grep $QT_FRAMEWORK | cut -d\( -f1` @executable_path/../Frameworks/$QT_FRAMEWORK.framework/Versions/Current/$QT_FRAMEWORK $BINARY;
      done;
      done
    - cd ../../
    - mv artifacts artifacts-darwin-aarch64
  tags:
    - macos-arm64
  artifacts:
    expire_in: 1 week
    paths:
      - artifacts-darwin-aarch64/

emscripten:
  stage: build
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  script:
  - source /emsdk/emsdk_env.sh
  - emmake make -C js
  - mkdir artifacts
  - cp js/gr.js artifacts/
  - mv artifacts artifacts-js
  artifacts:
    expire_in: 1 week
    paths:
    - artifacts-js/

packages-tar:
  stage: package
  image: ubuntu:16.04
  variables:
    GIT_STRATEGY: none
  script:
  - mkdir -p Windows-i686/gr/bin
  - mkdir -p Windows-i686/gr/lib
  - mv artifacts-windows32/*.dll Windows-i686/gr/bin/
  - mv artifacts-windows32/*.lib Windows-i686/gr/bin/
  - mv artifacts-windows32/gksqt.exe Windows-i686/gr/bin/
  - mv artifacts-windows32/platforms Windows-i686/gr/bin/
  - mv artifacts-windows32/fonts Windows-i686/gr/
  - mv artifacts-windows32/include Windows-i686/gr/
  - cp artifacts-js/gr.js Windows-i686/gr/lib/
  - rm -rf artifacts-windows32
  - mkdir -p Windows-x86_64/gr/bin
  - mkdir -p Windows-x86_64/gr/lib
  - mv artifacts-windows64/*.dll Windows-x86_64/gr/bin/
  - mv artifacts-windows64/*.lib Windows-x86_64/gr/bin/
  - mv artifacts-windows64/gksqt.exe Windows-x86_64/gr/bin/
  - mv artifacts-windows64/platforms Windows-x86_64/gr/bin/
  - mv artifacts-windows64/fonts Windows-x86_64/gr/
  - mv artifacts-windows64/include Windows-x86_64/gr/
  - cp artifacts-js/gr.js Windows-x86_64/gr/lib/
  - rm -rf artifacts-windows64
  - mkdir -p Windows-x86_64-msvc
  - mv artifacts-windows-64bit-cmake-msvc Windows-x86_64-msvc/gr
  - mkdir -p Debian-x86_64/gr/bin
  - mkdir -p Debian-x86_64/gr/lib
  - mv artifacts-debian9/*.so Debian-x86_64/gr/lib/
  - mv artifacts-debian9/gksqt Debian-x86_64/gr/bin/
  - mv artifacts-debian9/fonts Debian-x86_64/gr/
  - mv artifacts-debian9/include Debian-x86_64/gr/
  - cp artifacts-js/gr.js Debian-x86_64/gr/lib/
  - rm -rf artifacts-debian9
  - mkdir -p Debian-armhf/gr/bin
  - mkdir -p Debian-armhf/gr/lib
  - mv artifacts-debian9-armhf/*.so Debian-armhf/gr/lib/
  - mv artifacts-debian9-armhf/gksqt Debian-armhf/gr/bin/
  - mv artifacts-debian9-armhf/fonts Debian-armhf/gr/
  - mv artifacts-debian9-armhf/include Debian-armhf/gr/
  - cp artifacts-js/gr.js Debian-armhf/gr/lib/
  - rm -rf artifacts-debian9-armhf
  - mkdir -p Debian-aarch64/gr/bin
  - mkdir -p Debian-aarch64/gr/lib
  - mv artifacts-debian9-aarch64/*.so Debian-aarch64/gr/lib/
  - mv artifacts-debian9-aarch64/gksqt Debian-aarch64/gr/bin/
  - mv artifacts-debian9-aarch64/fonts Debian-aarch64/gr/
  - mv artifacts-debian9-aarch64/include Debian-aarch64/gr/
  - cp artifacts-js/gr.js Debian-aarch64/gr/lib/
  - rm -rf artifacts-debian9-aarch64
  - mkdir -p Ubuntu-x86_64/gr/bin
  - mkdir -p Ubuntu-x86_64/gr/lib
  - mv artifacts-ubuntu1604/*.so Ubuntu-x86_64/gr/lib/
  - mv artifacts-ubuntu1604/gksqt Ubuntu-x86_64/gr/bin/
  - mv artifacts-ubuntu1604/fonts Ubuntu-x86_64/gr/
  - mv artifacts-ubuntu1604/include Ubuntu-x86_64/gr/
  - cp artifacts-js/gr.js Ubuntu-x86_64/gr/lib/
  - rm -rf artifacts-ubuntu1604
  - mkdir -p CentOS-x86_64/gr/bin
  - mkdir -p CentOS-x86_64/gr/lib
  - mv artifacts-centos7/*.so CentOS-x86_64/gr/lib/
  - mv artifacts-centos7/gksqt CentOS-x86_64/gr/bin/
  - mv artifacts-centos7/fonts CentOS-x86_64/gr/
  - mv artifacts-centos7/include CentOS-x86_64/gr/
  - cp artifacts-js/gr.js CentOS-x86_64/gr/lib/
  - rm -rf artifacts-centos7
  - cp -r CentOS-x86_64 Linux-x86_64
  - mkdir -p Linux-i386/gr/bin
  - mkdir -p Linux-i386/gr/lib
  - mv artifacts-centos7-32bit/*.so Linux-i386/gr/lib/
  - mv artifacts-centos7-32bit/gksqt Linux-i386/gr/bin/
  - mv artifacts-centos7-32bit/fonts Linux-i386/gr/
  - mv artifacts-centos7-32bit/include Linux-i386/gr/
  - cp artifacts-js/gr.js Linux-i386/gr/lib/
  - rm -rf artifacts-centos7-32bit
  - mkdir -p ArchLinux-x86_64/gr/bin
  - mkdir -p ArchLinux-x86_64/gr/lib
  - mv artifacts-arch/*.so ArchLinux-x86_64/gr/lib/
  - mv artifacts-arch/gksqt ArchLinux-x86_64/gr/bin/
  - mv artifacts-arch/fonts ArchLinux-x86_64/gr/
  - mv artifacts-arch/include ArchLinux-x86_64/gr/
  - cp artifacts-js/gr.js ArchLinux-x86_64/gr/lib/
  - rm -rf artifacts-arch
  - mkdir -p Darwin-x86_64/gr/lib
  - mv artifacts-darwin/*.dylib Darwin-x86_64/gr/lib/
  - mv artifacts-darwin/*.so Darwin-x86_64/gr/lib/
  - mv artifacts-darwin/fonts Darwin-x86_64/gr/
  - mv artifacts-darwin/include Darwin-x86_64/gr/
  - mv artifacts-darwin/Applications Darwin-x86_64/gr/
  - cp artifacts-js/gr.js Darwin-x86_64/gr/lib/
  - rm -rf artifacts-darwin
  - if [ -d artifacts-darwin-aarch64 ]; then
      mkdir -p Darwin-aarch64/gr/lib;
      mv artifacts-darwin-aarch64/*.dylib Darwin-aarch64/gr/lib/;
      mv artifacts-darwin-aarch64/*.so Darwin-aarch64/gr/lib/;
      mv artifacts-darwin-aarch64/fonts Darwin-aarch64/gr/;
      mv artifacts-darwin-aarch64/include Darwin-aarch64/gr/;
      mv artifacts-darwin-aarch64/Applications Darwin-aarch64/gr/;
      cp artifacts-js/gr.js Darwin-aarch64/gr/lib/;
      rm -rf artifacts-darwin-aarch64;
      cd Darwin-aarch64 && tar czf gr.tar.gz gr && cd -;
    fi
  - cd Darwin-x86_64 && tar czf gr.tar.gz gr && cd -;
  - cd Windows-i686 && tar czf gr.tar.gz gr && cd -
  - cd Windows-x86_64 && tar czf gr.tar.gz gr && cd -
  - cd Windows-x86_64-msvc && tar czf gr.tar.gz gr && cd -
  - cd Debian-x86_64 && tar czf gr.tar.gz gr && cd -
  - cd Debian-armhf && tar czf gr.tar.gz gr && cd -
  - cd Debian-aarch64 && tar czf gr.tar.gz gr && cd -
  - cd Ubuntu-x86_64 && tar czf gr.tar.gz gr && cd -
  - cd CentOS-x86_64 && tar czf gr.tar.gz gr && cd -
  - cd Linux-i386 && tar czf gr.tar.gz gr && cd -
  - cd Linux-x86_64 && tar czf gr.tar.gz gr && cd -
  - cd ArchLinux-x86_64 && tar czf gr.tar.gz gr && cd -
  - mkdir Downloads
  - if echo "$CI_COMMIT_TAG" | grep -Eq '^v[0-9]+\.[0-9]+\.[0-9]+$'; then
      export VERSION=`echo "$CI_COMMIT_TAG" | sed 's/^v//'`;
      cp Windows-i686/gr.tar.gz Downloads/gr-$VERSION-Windows-i686.tar.gz;
      cp Windows-x86_64/gr.tar.gz Downloads/gr-$VERSION-Windows-x86_64.tar.gz;
      cp Windows-x86_64-msvc/gr.tar.gz Downloads/gr-$VERSION-Windows-x86_64-msvc.tar.gz;
      cp Debian-x86_64/gr.tar.gz Downloads/gr-$VERSION-Debian-x86_64.tar.gz;
      cp Debian-armhf/gr.tar.gz Downloads/gr-$VERSION-Debian-armhf.tar.gz;
      cp Debian-aarch64/gr.tar.gz Downloads/gr-$VERSION-Debian-aarch64.tar.gz;
      cp Ubuntu-x86_64/gr.tar.gz Downloads/gr-$VERSION-Ubuntu-x86_64.tar.gz;
      cp CentOS-x86_64/gr.tar.gz Downloads/gr-$VERSION-CentOS-x86_64.tar.gz;
      ln -s gr-$VERSION-CentOS-x86_64.tar.gz Downloads/gr-$VERSION-Redhat-x86_64.tar.gz;
      cp Linux-i386/gr.tar.gz Downloads/gr-$VERSION-Linux-i386.tar.gz;
      cp Linux-x86_64/gr.tar.gz Downloads/gr-$VERSION-Linux-x86_64.tar.gz;
      cp ArchLinux-x86_64/gr.tar.gz Downloads/gr-$VERSION-ArchLinux-x86_64.tar.gz;
      cp Darwin-x86_64/gr.tar.gz Downloads/gr-$VERSION-Darwin-x86_64.tar.gz;
      if [ -d Darwin-aarch64 ]; then
        cp Darwin-aarch64/gr.tar.gz Downloads/gr-$VERSION-Darwin-aarch64.tar.gz;
      fi;
      cp artifacts-js/gr.js Downloads/gr-$VERSION.js;
      cd Downloads && sha512sum -b gr-*.tar.gz > gr-$VERSION.sha512.txt && cd -;
    else
      cp Windows-i686/gr.tar.gz Downloads/gr-$CI_COMMIT_SHA-Windows-i686.tar.gz;
      cp Windows-x86_64/gr.tar.gz Downloads/gr-$CI_COMMIT_SHA-Windows-x86_64.tar.gz;
      cp Windows-x86_64-msvc/gr.tar.gz Downloads/gr-$CI_COMMIT_SHA-Windows-x86_64-msvc.tar.gz;
      cp Debian-x86_64/gr.tar.gz Downloads/gr-$CI_COMMIT_SHA-Debian-x86_64.tar.gz;
      cp Debian-armhf/gr.tar.gz Downloads/gr-$CI_COMMIT_SHA-Debian-armhf.tar.gz;
      cp Debian-aarch64/gr.tar.gz Downloads/gr-$CI_COMMIT_SHA-Debian-aarch64.tar.gz;
      cp Ubuntu-x86_64/gr.tar.gz Downloads/gr-$CI_COMMIT_SHA-Ubuntu-x86_64.tar.gz;
      cp CentOS-x86_64/gr.tar.gz Downloads/gr-$CI_COMMIT_SHA-CentOS-x86_64.tar.gz;
      ln -s gr-$CI_COMMIT_SHA-CentOS-x86_64.tar.gz Downloads/gr-$CI_COMMIT_SHA-Redhat-x86_64.tar.gz;
      cp Linux-i386/gr.tar.gz Downloads/gr-$CI_COMMIT_SHA-Linux-i386.tar.gz;
      cp Linux-x86_64/gr.tar.gz Downloads/gr-$CI_COMMIT_SHA-Linux-x86_64.tar.gz;
      cp ArchLinux-x86_64/gr.tar.gz Downloads/gr-$CI_COMMIT_SHA-ArchLinux-x86_64.tar.gz;
      cp Darwin-x86_64/gr.tar.gz Downloads/gr-$CI_COMMIT_SHA-Darwin-x86_64.tar.gz;
      if [ -d Darwin-aarch64 ]; then
        cp Darwin-aarch64/gr.tar.gz Downloads/gr-$CI_COMMIT_SHA-Darwin-aarch64.tar.gz;
      fi;
      cp artifacts-js/gr.js Downloads/gr-$CI_COMMIT_SHA.js;
      for f in Windows-i686 Windows-x86_64 Windows-x86_64-msvc Darwin-x86_64 Debian-x86_64 Debian-armhf Debian-aarch64
               Ubuntu-x86_64 CentOS-x86_64 Redhat-x86_64 Linux-i386 Linux-x86_64 ArchLinux-x86_64; do
        ln -s gr-$CI_COMMIT_SHA-$f.tar.gz Downloads/gr-latest-$f.tar.gz;
      done;
      if [ -d Darwin-aarch64 ]; then
        ln -s gr-$CI_COMMIT_SHA-Darwin-aarch64.tar.gz Downloads/gr-latest-Darwin-aarch64.tar.gz;
      fi;
      ln -s gr-$CI_COMMIT_SHA.js Downloads/gr-latest.js;
      cd Downloads && sha512sum -b gr-*.tar.gz > gr-$CI_COMMIT_SHA.sha512.txt && cd -;
      ln -s gr-$CI_COMMIT_SHA.sha512.txt Downloads/gr-latest.sha512.txt;
    fi
  artifacts:
    expire_in: 1 week
    paths:
    - Downloads/

deploy:
  stage: deploy
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  variables:
    GIT_STRATEGY: none
  only:
    - master@Scientific-IT-Systems/gr
    - develop@Scientific-IT-Systems/gr
    - tags@Scientific-IT-Systems/gr
  script:
  - chmod 644 Downloads/*.tar.gz
  - chmod 644 Downloads/*.js
  - python3 -m pip install git+https://gitlab-ci-token:${CI_JOB_TOKEN}@iffgit.fz-juelich.de/Scientific-IT-Systems/github-binary-upload.git
  - mkdir --mode=700 ~/.ssh/
  - (umask 0377 && echo "$SCIAPP_GR_PRIVATE_KEY" > ~/.ssh/id_rsa
                && echo "github.com $GITHUB_HOST_KEY" >> ~/.ssh/known_hosts)
  - git clone --mirror "$CI_REPOSITORY_URL" gr_mirror
  - cd gr_mirror && git push --mirror git@github.com:sciapp/gr.git && cd -
  - set +x
  - sshpass -p $RSYNC_PASSWORD rsync -av ./Downloads/ rsync://$RSYNC_USERNAME@iffweb.iff.kfa-juelich.de/gr/
  - if echo "$CI_COMMIT_TAG" | grep -Eq '^v[0-9]+\.[0-9]+\.[0-9]+$'; then
      echo "$SCIAPP_GR_ACCESS_TOKEN" | github-binary-upload --user jheinen sciapp/gr "$CI_COMMIT_TAG" Downloads/gr-*;
    fi

deploy-to-obs:
  stage: deploy
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  variables:
    GIT_STRATEGY: none
  only:
    - tags@Scientific-IT-Systems/gr
  script:
  - mkdir -p "${HOME}/.config/osc" && ln -s "${OSCRC}" "${HOME}/.config/osc/oscrc"
  - osc co science:gr-framework/gr
  - export VERSION=`echo "$CI_COMMIT_TAG" | sed 's/^v//'` ;
    sed 's/\(.*revision">\).*\(<.*\)/\1tags\/'$CI_COMMIT_TAG'\2/'
    science\:gr-framework/gr/_service |
    sed 's/\(.*version">\)[[:digit:]].*\(<.*\)/\1'$VERSION'\2/'
    > science\:gr-framework/gr/_service.new &&
    mv -f science\:gr-framework/gr/_service.new
    science\:gr-framework/gr/_service
  - osc commit science\:gr-framework/gr/_service -m "Release $CI_COMMIT_TAG"

deploy-to-aur:
  stage: deploy-to-aur
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/$CI_JOB_NAME
  only:
    - develop@Scientific-IT-Systems/gr
    - tags@Scientific-IT-Systems/gr
  script:
  - mkdir --mode=700 ~/.ssh/
  - (umask 0377 && echo "$AUR_GR_PRIVATE_KEY" > ~/.ssh/id_rsa
                && echo "aur.archlinux.org $AUR_HOST_KEY" >> ~/.ssh/known_hosts)
  - if [[ -n "${CI_COMMIT_TAG}" ]]; then
      if echo "$CI_COMMIT_TAG" | grep -Eq '^v[0-9]+\.[0-9]+\.[0-9]+$'; then
        git clone "ssh://aur@aur.archlinux.org/gr-framework.git";
        cd "gr-framework";
        sed -i -e "/^pkgver=/c\pkgver=\"${CI_COMMIT_TAG#v}\"" -e "/^pkgrel=/c\pkgrel=\"1\"" PKGBUILD;
        (
          source PKGBUILD;
          curl -o source -L "${source[0]}";
          SHA256SUM="$(sha256sum source | awk '{ print $1 }')";
          sed -i "/^sha256sums=/c\sha256sums=(\"${SHA256SUM}\")" PKGBUILD;
        );
        makepkg --printsrcinfo > .SRCINFO;
        git commit -a -m "Update to version ${CI_COMMIT_TAG#v}";
        git push;
      fi;
    else
      PKGVERS="$(git describe --long --tags | sed 's/^v//;s/\([^-]*-g\)/r\1/;s/-/./g')";
      git clone "ssh://aur@aur.archlinux.org/gr-framework-git.git";
      cd "gr-framework-git";
      sed -i -e "/^pkgver=/c\pkgver=\"${PKGVERS}\"" -e "/^pkgrel=/c\pkgrel=\"1\"" PKGBUILD;
      makepkg --printsrcinfo > .SRCINFO;
      git commit -a -m "Update to version ${PKGVERS}";
      git push;
    fi
